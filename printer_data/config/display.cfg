############
# Display ##
############
# [display 1.3-display]
# lcd_type: sh1106
# i2c_bus: i2c1_PB8_PB9
# i2c_mcu = mcu
# x_offset: 2

[mcu display]
serial: /dev/serial/by-id/usb-Klipper_stm32f042x6_110024000543304846333520-if00
restart_method: command

[display]
lcd_type: uc1701
# kill_pin: display:PF0
spi_bus: spi1
cs_pin: display:PA4
a0_pin: display:PA2
rst_pin: display:PA3
contrast: 63
encoder_pins: ^display:PA0, ^display:PA1
click_pin: ^!display:PB1
encoder_steps_per_detent: 2
#   How many steps the encoder emits per detent ("click"). If the
#   encoder takes two detents to move between entries or moves two
#   entries from one detent, try changing this. Allowed values are 2
#   (half-stepping) or 4 (full-stepping). The default is 4.


[output_pin BEEPER_pin]
pin: display:PF1
pwm: True
value: 0
shutdown_value: 0
cycle_time: 0.001
scale: 1000
 
[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE={S} CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

# name of neopixel should match name referenced in printer.cfg
# if there are other gcode_macros referencing the led display (e.g delayed gcode_macro)
[neopixel fysetc_mini12864]
pin: display:PA13
chain_count: 3
color_order: RGB
initial_RED: 1.00
initial_GREEN: 0.09
initial_BLUE: 0.00



[display_data _default_16x4 speed_factor]
position: 1, 10
text:
  ~feedrate~
  { "{:>4.0%}".format(printer.gcode_move.speed_factor) }


#####################
## Update Progress ##
#####################
[gcode_macro M73]
rename_existing: M773
variable_p: 0.0
variable_r: 0.0
# default_parameter_P: 0.0
# default_parameter_R: 0.0
gcode:
    M773 P{P}
    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=p VALUE={P|default(0)}
    SET_GCODE_VARIABLE MACRO=M73 VARIABLE=r VALUE={R|default(0)}

[display_data _default_16x4 printing_time]
position: 2, 11
text:
    {% set ptime = printer["gcode_macro M73"].r %}
    { "%02d:%02d" % (ptime // 60, ptime % 60) }


[display_data _default_16x4 print_status]
position: 3, 0
text: { render("_print_status") }

[display_data _default_16x4 voron_logo]
position: 3, 14
text: ~voron~



[display_template _print_status]
text:
  {% if printer.display_status.message %}
    { printer.display_status.message }
  {% elif printer.idle_timeout.printing_time %}
    { printer.print_stats.state.capitalize() }
  {% else %}
    Ready
  {% endif %}
  
[menu __main __temp __heatsoak_bed]
type: input
enable: {('heater_bed' in printer)}
name: {"Heatsoak:%3.0f" % (menu.input)}
index: 0
input: 30
input_min: 5
input_max: 360
input_step: 5
gcode: HEATSOAK_BED TEMP=100 SOAKTIME={'%.0f' % menu.input}

# [menu __main __temp __heatsoak_bed]
# type: command
# index: 0
# enable: {('heater_bed' in printer)}
# name: Heatsoak Bed
# gcode:
#     HEATSOAK_BED

[menu __main __temp __preheat_abs __all]
type: command
enable: {('extruder' in printer) and ('heater_bed' in printer)}
name: Preheat all
gcode:
    M140 S100
    M104 S250

[menu __main __temp __preheat_abs __hotend]
type: command
enable: {'extruder' in printer}
name: Preheat hotend
gcode: M104 S250

[menu __main __temp __preheat_abs __hotbed]
type: command
enable: {'heater_bed' in printer}
name: Preheat hotbed
gcode: M140 S100


[display_glyph chamber]
data:
    ................
    ****************
    *....*....*....*
    *....*....*....*
    *....******....*
    *..............*
    *..............*
    *.....****.....*
    *.***.*..*.***.*
    *.....****.....*
    *......**......*
    *..............*
    *.************.*
    *...*......*...*
    ****************
    ................

[display_glyph voron]
data:
   .......**.......
   .....******.....
   ....********....
   ..************..
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   .**..**..******.
   .******..**..**.
   .*****..**..***.
   .****..**..****.
   .***..**..*****.
   ..************..
   ....********....
   .....******.....
   .......**.......

# [display]
# display_group: __voron_display

# [display_template _vheater_temperature]
# param_heater_name: "extruder"
# text:
#   {% if param_heater_name in printer %}
#     {% set heater = printer[param_heater_name] %}
#     # Show glyph
#     {% if param_heater_name == "heater_bed" %}
#       {% if heater.target %}
#         {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
#         ~bed_heat{frame}~
#       {% else %}
#         ~bed~
#       {% endif %}
#     {% else %}
#       ~extruder~
#     {% endif %}
#     # Show temperature
#     { "%3.0f" % (heater.temperature,) }
#     # Optionally show target
#     {% if heater.target and (heater.temperature - heater.target)|abs > 2 %}
#       ~right_arrow~
#       { "%0.0f" % (heater.target,) }
#     {% endif %}
#     ~degrees~
#   {% endif %}

# [display_data __voron_display extruder]
# position: 0, 0
# text: { render("_vheater_temperature", param_heater_name="extruder") }

# [display_data __voron_display fan]
# position: 0, 10
# text:
#   {% if 'fan' in printer %}
#     {% set speed = printer.fan.speed %}
#     {% if speed %}
#       {% set frame = (printer.toolhead.estimated_print_time|int % 2) + 1 %}
#       ~fan{frame}~
#     {% else %}
#       ~fan1~
#     {% endif %}
#     { "{:>4.0%}".format(speed) }
#   {% endif %}

# [display_data __voron_display bed]
# position: 1, 0
# text: { render("_vheater_temperature", param_heater_name="heater_bed") }

# [display_data __voron_display progress_text]
# position: 1, 10
# text:
#   {% set progress = printer.display_status.progress %}
#   { "{:^6.0%}".format(progress) }
  
# [display_data __voron_display progress_text2]
# position: 1, 10
# text:
#   {% set progress = printer.display_status.progress %}
#   { draw_progress_bar(1, 10, 6, progress) }

# [display_data __voron_display printing_time]
# position: 2, 10
# text:
#   {% set ptime = printer.idle_timeout.printing_time %}
#   { "%02d:%02d" % (ptime // (60 * 60), (ptime // 60) % 60) }

# #########################################################
# # This section defines the actual chamber temp. field,
# # replace 'temperature_sensor chamber' as necessary
# #########################################################
# [display_data __voron_display chamber]
# position: 2, 0
# text:
#   {% set chamber = printer['temperature_fan chamber'] %}
# 	~chamber~
# 	{ "%3.0f" % (chamber.temperature,) }
# 	~degrees~

# [display_data __voron_display print_status]
# position: 3, 0
# text: 
#   {% if printer.display_status.message %}
#     { printer.display_status.message }
#   {% elif printer.idle_timeout.printing_time %}
#     {% set pos = printer.toolhead.position %}
#     { "X%-4.0fY%-4.0fZ%-5.2f" % (pos.x, pos.y, pos.z) }
#   {% else %}
#     { "VX.xxx " }
# 	~voron~
#   {% endif %}